INSERT INTO student
VALUES (6812171, '$2a$10$Dib4CtBAA6VN/ROBY4hK7er/Gkv6uPgyCQeRfPTur2A3jZ85KKfXe', 'Michael', 'Bijker', 'Computer Science', 'BSc');

INSERT INTO course
VALUES
('Computer architecture and networks','INFONW','Computer Science','BSc','BETA',1,'drs. L. Herlaar','LHerlaar.jpg','Nowadays computers are mostly used in networks where they have to cooperate with other computers. A computer usually also contains a collection of programs that have to work together. All in all, a modern computer network and computer system consists of a complex set of interlocking components and processes. Fortunately, we can make things clearer by introducing a good structure. In this course we study how computers are constructed and how the software uses them. You will also learn how computer networks such as the Internet are constructed. We look at the different protocols and you also learn to make calculations about, for example, the capacity of a network connection. Of course we also pay attention to wireless networks, telephone calls over the internet and security.'),
('Concurrency','INFOB3CC','Computer Science','BSc','BETA',2,'dr. T. L. McDonell','TLMcDonell.jpg','The course introduces concepts of concurrency and parallelism through the programming language Haskell. Concrete topics treated in this course include explicit management and synchronisation of threads, as well as higher level concurrency and parallelism abstractions. These ideas appear not only in Haskell, but in other modern languages such as C#, Scala, and Swift. An important part of the course is devoted to reasoning about the properties of concurrent programs. The language Haskell imposes a strong separation between pure computations, which are always safe to execute in parallel, and those with side-effects, which may result in non-deterministic behaviour when executed concurrently.'),
('Databases','INFODB','Computer Science','BSc','BETA',3,'drs. H. Philippi','HPhilippi.jpg','Business processes mainly revolve around information processing. This information has to be kept, that is what database management systems are for. The differences with simple file systems are countless. For example, there are query languages to easily find information, transaction systems to allow many users to access and change the information at the same time, and schema information to know what the data actually means. This course deals with the basics of relational databases, with an emphasis on design and question languages. In addition, attention is paid to some recent developments, such as web databases and semistructured data and XML.'),
('Data structures','INFODS','Computer Science','BSc','BETA',4,'dr. G. Tel','GTel.jpg','Before one can write a computer program to solve a problem, an approach (a series of steps) must be devised that the program can follow to solve the problem. Such a series of steps is called an algorithm. This course discusses algorithms for sorting and searching a collection of data. Search algorithms play a special role because they depend on how the data is stored. A method of data storage is called a data structure. Various data structures are discussed in the lecture. For many problems, fundamentally different algorithms or data structures can be devised. In Data Structures you also learn how to estimate the runtime of algorithms (and the memory use of data structures) without the need for implementation. Some of the topics covered are: sorting (quicksort, heap sort, bucket sort, ...); hash tables; search trees; red-black-trees, ski lists, ... In addition, a number of topics from mathematics will be discussed. These are necessary for the analysis of the algorithms and data structures.'),
('Functional Programming','INFOFP','Computer Science','BSc','BETA',1,'dr. F. Staals','FStaals.jpg','In the course imperative programming you have become acquainted with the language C #. In that language, a program consists of assignments: do this, do that. In a functional language, a program consists of functions as you know them from mathematics. Writing programs in such a language requires a different way of thinking and that is exactly what we are going to talk about in this profession. In concrete terms, we are going to solve problems using the functional language Haskell. This language has extensive abstraction possibilities, which makes programs often very compact. You dont have to worry about many details, such as calculation order and memory allocation. The emphasis is on what and not how. Haskell also has an extensive typing system, of which more and more elements are also included in other languages. Functional language recursion is the equivalent of loop constructs (for, while) in C #. It is the way to write programs that walk across a data structure or do repeated calculations. Since functional programs have no variables that can change value during the processing of the program, it is easy to reason about such programs. We will show how to systematically derive and transform programs, and how to prove properties. We can use these properties to make statements about correctness or to rewrite programs. If the program contains recursive functions then the concept of induction is necessary during proofs.'),
('Graphics','INFOGR','Computer Science','BSc','BETA',4,'dr. J. Bikker','JBikker.jpg','The course will start with a short coverage of the mathematical basics needed for computer graphics. This part will introduce fundamental concepts of linear algebra and other areas of higher mathematics that are important far beyond the field of graphics. Next, we discuss the foundations of computer graphics, such as transformations and projection of 3D models, hidden surface removal, triangle rasterization, shading, texture mapping, shadows, and ray tracing. Finally, we will also look briefly into more advanced topics in physically-based global illumination.'),
('Imperative Programming','INFOIMP','Computer Science','BSc','BETA',1,'drs. J.D. Fokker','JDFokker.jpg','In this course you will learn the programming language C #, in which commands are bundled in so-called methods that edit an object. It is therefore also an introduction to object-oriented programming. We look at how you change the memory and how you program choice and repetition. You describe new types of objects yourself with associated methods, but you are also introduced to the standard methods associated with C #. Topics discussed include methods for creating interactive user interfaces, creating animations with a Thread, manipulating files, and managing collections of data (collections). In the lecture some larger programs are discussed as an example of applications: a graphic bitmap editor, a vector drawing program, a route finder. and automatic language recognition through letter frequency analysis. In addition, we immediately see why it is useful to organize object classes hierarchically, and how to put rows of objects in an array. Special attention is paid to the use of object-oriented techniques in the design of somewhat larger programs, using standard libraries for collections and file I / O as examples.'),
('Logic for Computer Science','INFOB1LI','Computer Science','BSc','BETA',2,'dr. W.S. Swierstra','WSSwierstra.jpg','Logic is often seen as the foundation for science. It examines the rules for valid reasoning. Reasoning is the process by which conclusions are drawn from a number of statements, arguments or facts. Logic has many interfaces with computer science. Different areas within computer science, such as databases, software systems, artificial intelligence, theoretical computer science, games and simulations, use logical tools, methods and techniques. For example, logical verification tools are used to analyze software systems and check for correctness. Logical proof techniques are used to reason about information and to draw correct conclusions from it. Logical methods make it possible to specify, model and develop intelligent virtual characters for computer games and simulations.'),
('Modelling and system development','INFOMSO','Computer Science','BSc','BETA',1,'dr. ir. J. Egges','JEgges.jpg','This course (MSO) deals with the art of object oriented analysis and design. Attention is also paid to the various issues that, in addition to actual programming, are discussed during the building of software, such as requirements engineering, testing, refactors, and software development processes. MSO continues where Imperative Programming ends. At MSO you learn more about analyzing the problems that customers come up with and designing suitable solutions.'),
('Research methodes for Computer Science','INFOB3OMI','Computer Science','BSc','BETA',1,'prof. dr. G. T. Barkema,','GTBarkema,.jpg','In this course you will learn a number of essential academic skills: Setting up research in a scientific way, Collecting literature, Conducting research using statistical methods, Reporting, Presenting, Gaining knowledge about working methods within science and university.'),
('Data acquisition and applied analysis','NS-109B','Physics and Astronomy','BSc','BETA',2,'dr. P.J.S. van Capel','PJSvanCapel.jpg','The course DATA deals with essential practical skills for doing physical research in an experimental context. You learn to acquire and process information responsibly through measurement or calculation, including with the Python program. The DATA course consists of three parts: Practicum (DATA-P), Processing (DATA-V) and Programming in Python (DATA-Py).'),
('Electromagnetism theory','NS-112B','Physics and Astronomy','BSc','BETA',3,'prof. dr. R.H.H.G. van Roij','RHHGvanRoij.jpg','In this course the subjects electricity and magnetism are discussed. We start with Coulombs law for the electrostatic interaction between charged particles. With this we also calculate more complicated electric fields such as dipole fields and the field of continuous charge distributions. The theory is broadened with Gausss law and by introducing the electric potential. Then we treat magnetic phenomena. Magnetic fields are calculated from magnetic dipole distributions and from electric current distributions: laws of Biot-Savart and Ampère. We can also understand the origin of the magnetism of different types of magnetic substances. Finally, we consider time-dependent effects, which are described by Faradays induction law. At the end of the lecture, the topic of electromagnetism is summarized in the famous Maxwells laws.'),
('Waves and optics theory and practice','NS-108B','Physics and Astronomy','BSc','BETA',4,'dr. R. Holzinger','RHolzinger.jpg','Waves and wave phenomena are observed in many different branches of physics. This course deals with the origin and main properties of mechanical waves (sound) and light. In the tutorials, much attention is paid to everyday phenomena (for example, lens action and the formation of rainbows), and in the practicals theoretical knowledge is used in an experimental context. The course has a theoretical part (4 ects) and a practical part (3.5 ects), both of which must be completed with grade 5.5 or higher. In addition, a mark of 5.0 or higher must have been obtained for the examination. The final mark for the theoretical part is determined for 70% by the examination and for 30% by hand-in assignments. One of these tasks is a numerical command in Python. The theoretical part can be retaken. The grade for the practical part consists of the average of the final grades of the two research assignments. The final mark per assignment is determined on the basis of a rubric. Deadline for completion and assessment of the research assignments of the practical is at the end of block 4. There is no possibility for a resit or repair. A sufficiently completed practical experiment will be maintained for 2 years. Partial results for unfinished practical experiments are canceled.'),
('Quantum mechanics','NS-202B','Physics and Astronomy','BSc','BETA',2,'prof. dr. A.P. Mosk','APMosk.jpg','In this course, students discover the basic principles and formalism of quantum mechanics, as well as methods of solution for a number of fundamental quantum mechanical systems. This is done on the basis of lectures, exercise assignments and a numerical examination. The following topics are discussed: The development of quantum engineering, the Schroedinger equation and the interpretation of measurements and uncertainty relations, Solving the Schroedinger equation for simple 1-dimensional systems, The formalism and notation of modern quantum mechanics and the relation to linear algebra , The harmonic oscillator and the operator formalism, Three-dimensional systems and angular momentum, The hydrogen atom, Spin and multipart quantum mechanics, Quantum information and q-bits, Finding approximated solutions by means of (time independent) fault calculation and the variational principle, Numerical solving of a quantum mechanical problem and reporting thereof.'),
('Relativistic and classical mechanics','NS-106B','Physics and Astronomy','BSc','BETA',1,'dr. D. van Oosten','DvanOosten.jpg','Classical mechanics are based on Newtons laws, which he proposed on the assumption that all motion must be relative. From seemingly simple assumptions, he developed a method to predict the movement and rotation of objects based on the forces acting on objects. Mechanical energy, momentum, angular momentum and the associated conservation laws are important concepts that will be discussed. As the most spectacular application of Newtons laws and the previously mentioned conservation laws, we will learn to describe the orbits of planets around the sun. But we will also see for objects with very high speeds that the classical mechanics can no longer be correct. In that case, we must apply Einsteins theory of relativity, which makes the concept of relativity of motion even more important than Newton did. This theory has far-reaching consequences for our description of what space and time are. We will have to learn how to compare the measurements of lengths and durations of different observers, using the so-called Lorentz transformations. We will also have to adapt the concepts of energy and momentum to this new theory to describe collisions at very high speeds (such as in particle accelerators).'),
('Statistical physics theory and experiment','NS-204B','Physics and Astronomy','BSc','BETA',1,'dr. P.J.S. van Capel','PJSvanCapel.jpg','In this course, principles and applications of thermodynamics and statistical physics will be discussed. The following concepts will be discussed such as heat, heat capacity, temperature and temperature scales, energy, labor, Carnot cycle, the Boltzmann distribution, kinetic gas theory, the Maxwell-Boltzmann speed distribution, pressure, free path length, diffusion, entropy, adiabatic processes, the Major Laws der Thermodynamics, free energy, equipartition, the partition sum, the canonical ensemble, the chemical potential, phase transitions, Ising model, the Van der Waals equation of state, and Brownian motion. We will describe the framework with which the properties of macroscopic quantities of matter (eg the pressure of a liter of gas, the magnetization of a block of iron, the melting temperature of ice, or the (de) mixing of two substances) can in principle be obtained. from the microscopic details (e.g. molecular velocities or atomic interactions). Statistical methods (mean, standard deviation, fluctuations, probability distributions) will play a central role in this. The focus will be on classic many-particle systems in thermodynamic equilibrium, primarily non-interacting systems (ideal gas, spins in magnetic field), but later also systems with interactions and thus phase transitions (liquid condensation and spontaneous magnetization). The course deals with both formal aspects and direct applications, where possible illustrated by examples from contemporary research.'),
('Mathematical techniques 1','NS-120B','Physics and Astronomy','BSc','BETA',1,'dr. M. Ruijgrok','MRuijgrok.jpg','In this course, together with mathematical techniques 2 (NS-120B), the mathematical foundation is laid for the physics subjects. The following topics are covered: vector calculation, function research, limits, differentiation and integration with applications, simple differential equations, complex numbers.'),
('Mathematical techniques 2','NS-121B','Physics and Astronomy','BSc','BETA',2,'dr. J.W. van de Leur','JWvandeLeur.jpg','This course is the continuation of Mathematical Techniques 1 (WISN101). The following topics are discussed: matrix calculation, vector fields, differentiation and integration in more dimensions with applications (arc length, volume, flux, etc.), classical integral theorems.'),
('Mathematical techniques 3','NS-220B','Physics and Astronomy','BSc','BETA',1,'dr. C.C. Kreisbeck','CCKreisbeck.jpg','In the course some topics related to Fourier theory are discussed. Topics covered are: solving methods for differential equations, scattering, eigenvalues / eigenvectors, Fourier series and Fourier integrals, convolution, basis of distribution theory.'),
('Analysis','WISB114','Mathematics','BSc','BETA',3,'prof. dr. S.M. Verduyn Lunel','SMVerduynLunel.jpg','In the course Introduction Analysis some fundamental topics from the analysis on Rn are discussed. Some of these subjects have already been touched on in the Infinitesimaal Account lectures. There, however, the emphasis was on working and calculating with the concepts, while here the emphasis is on understanding, formulating and proving. The tutorials will practice practicing proof of results and writing it down clearly and completely. In this course, new subjects are also tapped that offer a different view of the analysis than the infinitesimal account and which are fundamental for the further construction of the analysis. It is a compulsory subject for all math students and provides a good preparation for level 2 lectures'),
('Analysis in more variables','WISB212','Mathematics','BSc','BETA',4,'dr. F.J. Ziltener','FJZiltener.jpg','This course is an elective for math students. It covers various aspects of the analysis in several real variables. It is prior knowledge for the directions differential geometry, differential equations and dynamic systems.'),
('Proofs in Mathematics','WISB102','Mathematics','BSc','BETA',1,'prof. dr. C. Faber','CFaber.jpg','In the course Proofs in Mathematics, the student is introduced to the abstract style of reasoning in mathematics and practices various methods of proof. This course is a compulsory subject for all math students and provides essential prior knowledge for all other math subjects in the bachelor.'),
('Communication in mathematics','WISB201','Mathematics','BSc','BETA',4,'S.A. Wepster','SAWepster.jpg','In this course, students practice a number of aspects of scientific communication: speaking, writing, collaborating. Particularly in the written reporting, attention is also paid to treating the work of others with integrity (citing, citing sources, etc.). This course is compulsory for in the mathematics program.'),
('Infi and Linear Algebra 1','WISB107','Mathematics','BSc','BETA',1,'dr. mr. B.N. van den Berg','BNvandenBerg.jpg','This course consists of two different basic topics from mathematics - Infinitesimal Calculation and Linear Algebra - which will be treated separately: on Monday and Thursday Linear Algebra, on Tuesday Infinitesimal Calculation. The course is compulsory for all math students. The course provides prior knowledge for almost all mathematics courses in the bachelor.'),
('Infi and Linear Algebra 2','WISB108','Mathematics','BSc','BETA',2,'dr. mr. B.N. van den Berg','BNvandenBerg.jpg','This course is a continuation of the course Infinitesimal Calculation and Linear Algebra 1, and just like that course consists of the treatment of two different basic subjects of mathematics - Infinitesimal Calculation and Linear Algebra - which will be treated separately: on Monday Linear Algebra, on Tuesday and Thursday Infinitesimal account. The course is compulsory for all math students. It provides prior knowledge for almost all mathematics subjects in the bachelor.'),
('Introduction Groups and Rings','WISB124','Mathematics','BSc','BETA',4,'dr. G.L.M. Cornelissen','GLMCornelissen.jpg','A group is the mathematical formalization of the term symmetry and a ring is a formalization of a structure with addition and multiplication. In this course, the student is introduced to these two abstract structures, their properties, and concrete manifestations. The course is compulsory for math students. The course provides prior knowledge for all algebra, analysis, geometry and topology courses in the bachelor.'),
('Introduction to probability theory and statistics','WISB161','Mathematics','BSc','BETA',2,'dr. S Dirksen','SDirksen.jpg','The course is a first introduction to probability theory and statistics. The course is compulsory for all mathematics students and provides essential prior knowledge for many of the courses in the applied directions.'),
('Introduction Topology','WISB243','Mathematics','BSc','BETA',2,'dr. D. Schindler','DSchindler.jpg','The aim of the course Introduction to Topology is to familiarize the student with the fundamental concepts of topology, in particular open and closed collections, compactness, coherence, compactification, metrizability. After the course, the student should be able to work with these concepts and apply them in mathematical situations. The course Topology is a bound elective for mathematics students. The course is essential for many disciplines in pure mathematics, but is recommended for a wide group of students, also in the disciplines of measure and integration theory, differential equations and dynamic systems.'),
('Programming for Mathematics','WISB152','Mathematics','BSc','BETA',4,'dr. T. van Leeuwen','TvanLeeuwen.jpg','As a mathematician, you can come into contact with programming in several ways, for example in developing algorithms for simulations (eg weather models), finding structure in large data sets (eg Google or Facebook) and even number theory (eg decomposing numbers). Computer experiments, in addition to experiments and theory, are an important tool in conducting science. It is therefore important that a computer experiment meets all the requirements that you would expect from a normal experiment: the setup (computer code) must be correct and the experiment must be reproducible. Programming in Mathematics is a context course. It is a compulsory subject in the Bachelor of Mathematics. Twin and Twinfo students are exempted from this course on the basis of their physics or IT program.'),
('Advanced machine learning','INFOMAML','Artificial Intelegance','MSc','BETA',2,'dr. M. van Ommen','MvanOmmen.jpg','Modern machine learning methods have achieved spectacular results on various tasks. Yet there are pitfalls and limitations that cant be overcome simply by increasing the amounts of data and computing power. For example, standard methods assume that the data are drawn from a single, unchanging probability distribution. The two main topics that we cover in this course both deal with situations where that is not the case. The first topic, causal inference, is the subfield of machine learning that studies causes and effects: if we make a change to one random variable in a system, for which other variables does the distribution change? An understanding of these cause-and-effect relations allows us to predict the results of a change in the environment. We will also look at the problem of learning these relations from data. Second, reinforcement learning is about the design of agents that can learn to interact with an unknown environment. Recent advances in supervised learning (such as deep learning) can be built on by reinforcement learning methods. This brings with it a unique set of challenges that we will cover in this course.'),
('Cognitive Modeling','INFOMCM','Artificial Intelegance','MSc','BETA',2,'dr. C.P. Janssen','CPJanssen.jpg','Formal models of human behavior and cognition that are implemented as computer simulations - cognitive models - play a crucial role in science and industry. In science, cognitive models formalize psychological theories. This formalization allows one to predict human behavior in novel settings and to tease apart the parameters that are essential for intelligent behavior. Cognitive models are used to study many domains, including learning, decision making, language use, multitasking, and perception and action. The models take many forms including dynamic equation models, neural networks, symbolic models, and Bayesian networks. In industry, cognitive models predict human behavior in intelligent user models. These user models are used for example for human-like game opponents and intelligent tutoring systems that adaptively change the difficulty of a game or training program to a model of the humans capacities. Similarly, user models are used in the design and evaluation of interfaces: what mistakes are humans likely to make in a task, what information might they overlook on an interface, and what are the best points to interrupt a user (e.g., with an e-mail alert) such that this interruption does not overload them? To be able to develop, implement, and evaluate cognitive models and user models, you first need to know which techniques and methods are available and what are appropriate (scientific or practical) questions to test with a model. Moreover, you need practical experience in implementing (components of) such models. In this course you will get an overview of various modeling techniques that are used world-wide and also by researchers in Utrecht (esp. in the department of psychology and the department of linguistics). You will learn their characteristics, strengths and weaknesses, and their theoretical and practical importance. Moreover, you will practice with implementing (components of) such models during lab sessions.'),
('Computational argumentation','INFOMCARG','Artificial Intelegance','MSc','BETA',3,'prof. dr. mr. H. Prakken','HPrakken.jpg','This course gives an introduction to the computational study of argumentation in AI, a currently popular subfield of symbolic AI. The course especially focuses on formal models of argumentation and their application in areas like commonsense reasoning, legal reasoning and multi-agent interaction. The computational study of argumentation concerns two aspects: reasoning and dialogue. Argumentation as a form of reasoning makes explicit the reasons for the conclusions that are drawn and how conflicts between reasons are resolved. Systems for argumentation-based inference were orginally developed in the field of nonmonotonic logic, which formalises qualitative reasoning with incomplete, uncertain or inconsistent information. Argument-based systems have been very successful as nonmonotonic logics, since they are based on very natural concepts, such as argument, counterargument, rebuttal and defeat. In this course the following formalism will be discussed: Default logic (a still influential early nonmonotonic logic) The theory of abstract argumentation frameworks (the generally accepted formal foundation of the field) The theory of structured argumentation frameworks, with a special focus on the ASPIC+ approach. Formal accounts of change operations on argumentation frameworks Formal models of legal case-based reasoning Argumentation as a form of dialogue concerns the rational resolution of conflicts of opinion by verbal means. Intelligent agents may disagree, for instance, about the pros and cons of alternative proposals, or about the factual basis of such proposals. Dialogue systems for argumentation formally define protocols for argumentation dialogues and thus enable a formal study of the dynamics of argumentative agent interaction, including issues of strategic choice. In this course two examples of such dialogeus systems will be discussed.'),
('Exp. in Psychology and Linguistics','INFOMEPL','Artificial Intelegance','MSc','BETA',3,'dr. R.W.F. Nouwen','RWFNouwen.jpg','Both science and industry are interested in creating precise formal models of human behaviour and cognition. To help build, test and optimise such models, one needs to create and run experiments. Students participating in this course will learn (I) how to design experiments given an existing model, (II) how to implement experiments using various tools and, finally, (III) how to extract data from the recorded responses for analysis purposes. Most theoretical claims in linguistics and psychology are made by positing a formal model. The aim of such models is to make precise predictions. Moreover, the predictions of a model need to tested with formal experiments. The results of the experiment may or may not lead to changes in the model and thus lead to a new set of testable predictions. Essential in the modelling-experimenting cycle is careful experimental design. The course covers the practical and theoretical considerations for experimental research, from posing the research question to interpreting and reporting experimental results. In industry, experiments are also used frequently. For example, to assess how people use interfaces (e.g., where do they look or click, or how particular text influences their subsequent choices?), to test what the best design of a product is, or to test the appropriateness of a user model (e.g., do people learn what the model predicts them to learn, do they have a more immersive experience when a model guides adaptation of the software?). In this course you will get an overview of various experimenting techniques that are used world-wide and also by researchers in Utrecht (esp. in the department of psychology and the department of linguistics). You will learn how to use such techniques for testing specific models, as well as where the limits of these technique lie. In the practicals you will also gain hands-on experience with the implementation, data manipulation and data analysis steps of experimenting.'),
('Intelligent agents','INFOIAG','Artificial Intelegance','MSc','BETA',1,'dr. P. Yolum','PYolum.jpg','This course is about the theory and realisation of intelligent agents, pieces of software that display some degree of autonomy, realised by incorporating high-level cognitive / mental attitudes into both modelling and implementation of this kind of software. The agent concept calls for an integration of several topics in artificial intelligence, such as knowledge representation and reasoning (in particular reasoning about action and change) and planning. In the course time is devoted to the philosophical and theoretical (mostly logical) foundations of the area of intelligent agents. Furthermore, ways of realising them by special architectures and so-called agent-oriented programming languages in which one can program the mental states of agents are described. This course presents the introductory theory for the agent-oriented courses in the Master programme.'),
('Machine learning for human vision','INFOMLHVL','Artificial Intelegance','MSc','BETA',1,'dr. B.M. Harvey','BMHarvey.jpg','Machine learning with deep convolutional neural networks (deep learning) is being applied increasingly broadly in computer science, technology and scientific research. This method allows computer systems to perform tasks that have previously been impossible or inaccurate for computers, but typically straightforward for humans. Tasks like visual object identification and natural language processing have traditionally been investigated by cognitive scientists and linguists, but recent applications of deep learning to these tasks also positions them at the center of recent artificial intelligence developments. Therefore, it is important for AI students and researchers to understand the links between cognitive science and AI. In this course, you will learn the principles behind deep learning, an approach inspired by the structure of the brain. You will learn how these principles are implemented in the brain, focusing on the two aspects of visual processing and language (semantic or syntactic) processing. You will build your own deep learning systems for the interpretation of natural images and language, using modern high-level neural network APIs that make implementation of these systems accessibleand efficient.'),
('Multi-agent learning','INFOMAA','Artificial Intelegance','MSc','BETA',4,'dr. G.A.W. Vreeswijk','GAWVreeswijk.jpg','This seminar focuses on forms of machine learning that typically occur in multi-agent systems. Topics include learning and teaching, fictitious play, rational learning, no-regret learning, targeted learning, multi-agent reinforcement learning and evolutionary learning.'),
('Multi-agent systems','INFOMAS','Artificial Intelegance','MSc','BETA',3,'dr. T. Baarslag','TBaarslag.jpg','This course focuses on multi-agent issues and will consist of lecture, seminar and lab sessions. The lectures will cover the following topics: Game theory, Auctions, Communication, Social choice, Mechanism Design, Normative Multi-Agent Systems. The seminar sessions consists of student presentations and will cover other multi-agent system issues such as: Logics for Multi-Agent Systems, Multi-Agent Organisations and Electronic Institutions, Normative Multi-Agent Systems, Argumentation and Dialogues in Multi-Agent Systems, Multi-Agent Negotiation, Communication and coordination in Multi-Agent Systems, Development of Multi-Agent Systems. Each student is expected to present some papers on one of the abovementioned topics. In the lab sessions the students will develop multi-agent systems on different platforms such as 2APL and Jade.'),
('Natural language processing','INFOMNLP','Artificial Intelegance','MSc','BETA',4,'dr. T. Deoskar','TDeoskar.jpg','This course is an advanced introduction to the study of language from a computational perspective, and to the fields of computational linguistics (CL)/Natural Language processing (NLP). It synthesizes research from linguistics and computer science and covers formal models for representing and analyzing words, sentences and documents. Students will learn how to analyse sentences algorithmically, and how to build interpretable semantic representations, emphasising data-driven and machine learning approaches and algorithms. The course will cover a number of standard models and algorithms (language models, HMMs, chart and transition based syntactic parsing, distributed semantic models, various neural network models) that are used throughout NLP and applications of these methods in tasks such as machine translation or text summarization.'),
('Phi-Logic and Computation','WBMV13005','Artificial Intelegance','MSc','GW',1,'dr. R. Lemhoff','RLemhoff.jpg','Students will learn how to answer one or more of the following research questions by means of an actor-based methodology in which each question will be addressed from multiple perspectives.+ What is a program?+ What is a computer?+ What are the practical implications of undecidability?+ What is the distinction between a stored-program computer and a universal Turing machine?+ What is the difference between a model (of computation) and a physical computer? This is a reading &writing course. Attendance is obligatory. Homework will already be handed out during the first week of class with a firm deadline in the second week. Late arrivals in class will only be tolerated once; in other cases, they can lead to a deduction of the student’s final grade. The aim of the course on proofs as programs is to get an understanding of type theory and its role within logic, linguistics, and computer science and get acquainted to the Curry-Howard correspondence, relating types to propositions and programs to proofs.'),
('Social computing','INFOMSOC','Artificial Intelegance','MSc','BETA',4,'dr. A. A. Akdag','AAAkdag.jpg','unavailable'),
('Tlc-Logic and language','TLMV13020','Artificial Intelegance','MSc','GW',2,'prof. dr. M.J. Moortgat','MJMoortgat.jpg','This course covers advanced methods and ideas in the logical analysis of language, with an emphasis on type-logical methods for the analysis of natural language syntax and semantics. The course has a capita selecta format, focusing on various aspects of the connection between language and reasoning. The 2019-2020 edition consists of three parts. In the first part, we introduce categorial grammar logics, starting with Lambeks Syntactic Calculus. We show how the syntactic calculus can be extended with control operations that allow for restricted forms of reordering and/or restructuring. We discuss the proofs-as-programs interpretation of syntactic derivations, comparing the set theoretic models of formal semantics with vector-based modelling as used in present day NLP. In the second part, we situate typelogical grammars in the wider context of substructural logics. The focus in this part is on prooftheoretic methods (display calculi, decidability) and on soundness/completeness with respect to algebraic and Kripke-style relational semantics. In the final part of the course, we introduce the machine learning perspective on the themes above. We show how from vector-based representations of word meanings one can compute the interpretation of larger phrases in a compositional way.');
